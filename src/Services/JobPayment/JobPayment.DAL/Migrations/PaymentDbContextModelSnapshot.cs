// <auto-generated />
using System;
using JobPayment.DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobPayment.DAL.Migrations
{
    [DbContext(typeof(PaymentDbContext))]
    partial class PaymentDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobPayment.Core.Entities.Balance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("BonusCoin")
                        .HasColumnType("float");

                    b.Property<double>("Coin")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("JobPayment.Core.Entities.Deposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BalanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("JobPayment.Core.Entities.OldPacket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Coin")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OldValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PacketId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PacketId");

                    b.ToTable("OldPackets");
                });

            modelBuilder.Entity("JobPayment.Core.Entities.OldService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("OldCoin")
                        .HasColumnType("float");

                    b.Property<Guid>("PriceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PriceId");

                    b.ToTable("OldServices");
                });

            modelBuilder.Entity("JobPayment.Core.Entities.Packet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Coin")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte>("PacketType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Packets");
                });

            modelBuilder.Entity("JobPayment.Core.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Coin")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("InformationType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("JobPayment.Core.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BalanceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("BeforeBalanceCoin")
                        .HasColumnType("float");

                    b.Property<double?>("Coin")
                        .HasColumnType("float");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("InformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("InformationType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TransactionStatus")
                        .HasColumnType("tinyint");

                    b.Property<byte>("TranzactionType")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BalanceId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("JobPayment.Core.Entities.Deposit", b =>
                {
                    b.HasOne("JobPayment.Core.Entities.Balance", "Balance")
                        .WithMany("Deposits")
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JobPayment.Core.Entities.Transaction", "Transaction")
                        .WithOne("Deposit")
                        .HasForeignKey("JobPayment.Core.Entities.Deposit", "TransactionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Balance");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("JobPayment.Core.Entities.OldPacket", b =>
                {
                    b.HasOne("JobPayment.Core.Entities.Packet", "Packet")
                        .WithMany("OldPackets")
                        .HasForeignKey("PacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Packet");
                });

            modelBuilder.Entity("JobPayment.Core.Entities.OldService", b =>
                {
                    b.HasOne("JobPayment.Core.Entities.Service", "Price")
                        .WithMany("OldPrices")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Price");
                });

            modelBuilder.Entity("JobPayment.Core.Entities.Transaction", b =>
                {
                    b.HasOne("JobPayment.Core.Entities.Balance", "Balance")
                        .WithMany("Tranzactions")
                        .HasForeignKey("BalanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Balance");
                });

            modelBuilder.Entity("JobPayment.Core.Entities.Balance", b =>
                {
                    b.Navigation("Deposits");

                    b.Navigation("Tranzactions");
                });

            modelBuilder.Entity("JobPayment.Core.Entities.Packet", b =>
                {
                    b.Navigation("OldPackets");
                });

            modelBuilder.Entity("JobPayment.Core.Entities.Service", b =>
                {
                    b.Navigation("OldPrices");
                });

            modelBuilder.Entity("JobPayment.Core.Entities.Transaction", b =>
                {
                    b.Navigation("Deposit")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
